generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  authProvider  AuthProvider
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  paymentStatus PaymentStatus   @default(FREE)
  accounts      Account[]
  PasswordReset PasswordReset[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model PasswordReset {
  id         String   @id
  secret     String   @unique
  expires_at DateTime
  is_used    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model cas__organisation {
  id                        Int                         @id(map: "cas__organisation_pk") @default(autoincrement())
  name                      String                      @db.VarChar(128)
  slug                      String                      @unique(map: "cas__organisation_slug_uindex") @db.VarChar(128)
  description               String?
  inserted_date             DateTime                    @db.Timestamp(6)
  storage_used              BigInt
  billing_period_A          BigInt
  billing_period_B          BigInt
  billing_period_C          BigInt
  cas__organisation_api_key cas__organisation_api_key[]
  cas__user                 cas__user[]
  shop__order               shop__order[]
  shop__order_status        shop__order_status[]
}

model cas__organisation_api_key {
  id                  BigInt                @id(map: "cas__organisation_api_key_pk") @default(autoincrement())
  organisation_id     Int
  api_key             String                @unique(map: "cas__organisation_api_key_api_key_uindex") @db.Char(32)
  used_count_today    BigInt
  user_id             BigInt
  is_active           Boolean
  is_deleted          Boolean
  description         String?
  inserted_date       DateTime              @db.Timestamp(6)
  expiration_date     DateTime              @db.Timestamp(6)
  last_used_date      DateTime              @db.Timestamp(6)
  cas__organisation   cas__organisation     @relation(fields: [organisation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cas__organisation_api_key_cas__organisation_id_fk")
  cas__user           cas__user             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cas__organisation_api_key_cas__user_id_fk")
  core__api_key_usage core__api_key_usage[]

  @@index([organisation_id], map: "cas__organisation_api_key_organisation_id_index")
}

model cas__user {
  id                        BigInt                      @id(map: "cas__user_pk") @default(autoincrement())
  organisation_id           Int
  email                     String                      @unique(map: "cas__user_email_uindex") @db.VarChar(200)
  inserted_date             DateTime                    @db.Timestamp(6)
  updated_date              DateTime                    @db.Timestamp(6)
  synced_date               DateTime                    @db.Timestamp(6)
  workos_id                 String?                     @db.VarChar(100)
  first_name                String?                     @db.VarChar(100)
  last_name                 String?                     @db.VarChar(100)
  avatar_url                String?
  credit                    Int
  credit_alert_lower_then   Int?
  lifetime_subscribe        Boolean
  cas__organisation_api_key cas__organisation_api_key[]
  cas__organisation         cas__organisation           @relation(fields: [organisation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cas__user_cas__organisation_id_fk")
  cas__user_credit          cas__user_credit[]
  cas__user_identity        cas__user_identity[]
  shop__order               shop__order[]
}

model core__api_key_usage {
  id                        BigInt                    @id(map: "core__api_key_usage_pk") @default(autoincrement())
  key_id                    BigInt
  operation_class           operation_class_enum
  spend                     Int                       @db.SmallInt
  meta_data                 Json?
  inserted_date             DateTime                  @db.Timestamp(6)
  cas__organisation_api_key cas__organisation_api_key @relation(fields: [key_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "core__api_key_usage_cas__organisation_api_key_id_fk")

  @@index([inserted_date], map: "core__api_key_usage_inserted_date_index")
  @@index([key_id], map: "core__api_key_usage_key_id_index")
}

model cas__user_identity {
  id              BigInt    @id(map: "cas__user_identity_pk") @default(autoincrement())
  user_id         BigInt
  session         String    @unique(map: "cas__user_identity_session_uindex")
  expired         Boolean
  inserted_date   DateTime  @db.Timestamp(6)
  expiration_date DateTime  @db.Timestamp(6)
  cas__user       cas__user @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cas__user_identity_cas__user_id_fk")

  @@index([user_id], map: "cas__user_identity_user_id_index")
}

model cas__user_credit {
  id            BigInt    @id(map: "cas__user_credit_pk") @default(autoincrement())
  user_id       BigInt
  external_id   String    @unique(map: "cas__user_credit_external_id_uindex") @db.Char(16)
  amount        Int
  description   String?
  inserted_date DateTime  @db.Timestamp(6)
  cas__user     cas__user @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cas__user_credit_cas__user_id_fk")

  @@index([user_id], map: "cas__user_credit_user_id_index")
}

model shop__order {
  id                  BigInt                @id(map: "shop__order_pk") @default(autoincrement())
  order_number        String                @unique(map: "shop__order_order_number_uindex") @db.VarChar(48)
  user_id             BigInt
  price               Decimal               @db.Decimal
  currency_id         Int
  inserted_date       DateTime              @db.Timestamp(6)
  updated_date        DateTime              @db.Timestamp(6)
  organisation_id     Int
  order_pay_date      DateTime?             @db.Timestamp(6)
  cas__organisation   cas__organisation     @relation(fields: [organisation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shop__order_cas__organisation_id_fk")
  cas__user           cas__user             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shop__order_cas__user_id_fk")
  shop__currency      shop__currency        @relation(fields: [currency_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shop__order_shop__currency_id_fk")
  shop__order_item    shop__order_item[]
  shop__order_log     shop__order_log[]
  shop__order_payment shop__order_payment[]

  @@index([user_id], map: "shop__order_user_id_index")
  @@index([organisation_id], map: "shop__order_organisation_id_index")
}

model shop__order_item {
  id              BigInt      @id(map: "shop__order_item_pk") @default(autoincrement())
  order_id        BigInt
  label           String
  price           Decimal     @db.Decimal
  credit_amount   Int
  special_actions String?
  inserted_date   DateTime    @db.Timestamp(6)
  shop__order     shop__order @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shop__order_item_shop__order_id_fk")

  @@index([order_id], map: "shop__order_item_order_id_index")
}

model shop__order_payment {
  id                                 Int                                  @id(map: "shop__order_payment_pk") @default(autoincrement())
  order_id                           BigInt
  gateway_id                         String                               @db.VarChar(64)
  price                              Decimal                              @db.Decimal
  status                             String?                              @db.VarChar(64)
  inserted_date                      DateTime                             @db.Timestamp(6)
  last_checked_date                  DateTime?                            @db.Timestamp(6)
  gateway_provider_id                Int                                  @db.SmallInt
  shop__order                        shop__order                          @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shop__order_payment_shop__order_id_fk")
  shop__order_payment_gateway        shop__order_payment_gateway          @relation(fields: [gateway_provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shop__order_payment_shop__order_payment_gateway_id_fk")
  shop__order_payment_status_history shop__order_payment_status_history[]

  @@index([gateway_id], map: "shop__order_payment_gateway_id_index")
  @@index([gateway_provider_id], map: "shop__order_payment_gateway_provider_id_index")
  @@index([order_id], map: "shop__order_payment_order_id_index")
  @@index([status], map: "shop__order_payment_status_index")
}

model shop__order_payment_gateway {
  id                  Int                   @id(map: "shop__order_payment_gateway_pk") @default(autoincrement()) @db.SmallInt
  code                String                @unique(map: "shop__order_payment_gateway_code_uindex") @db.VarChar(64)
  name                String
  shop__order_payment shop__order_payment[]
}

model shop__order_payment_status_history {
  id                  Int                 @id(map: "shop__order_payment_status_history_pk") @default(autoincrement())
  payment_id          Int
  status              String              @db.VarChar(64)
  inserted_date       DateTime            @db.Timestamp(6)
  shop__order_payment shop__order_payment @relation(fields: [payment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shop__order_payment_status_history_shop__order_payment_id_fk")

  @@index([payment_id], map: "shop__order_payment_status_history_payment_id_index")
}

model shop__currency {
  id          Int           @id(map: "shop__currency_pk") @default(autoincrement())
  code        String        @unique(map: "shop__currency_code_uindex") @db.Char(3)
  shop__order shop__order[]
}

model shop__order_log {
  id            BigInt      @id(map: "shop__order_log_pk") @default(autoincrement())
  order_id      BigInt
  message       String
  level         Int         @db.SmallInt
  inserted_date DateTime    @db.Timestamp(6)
  shop__order   shop__order @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shop__order_log_shop__order_id_fk")

  @@index([order_id], map: "shop__order_log_order_id_index")
}

model shop__order_status {
  id                Int               @id(map: "shop__order_status_pk") @default(autoincrement())
  organisation_id   Int
  status_code       String            @db.VarChar(32)
  public_label      String            @db.VarChar(128)
  system_code       String            @db.VarChar(32)
  cas__organisation cas__organisation @relation(fields: [organisation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shop__order_status_cas__organisation_id_fk")

  @@unique([organisation_id, system_code], map: "shop__order_status_organisation_id_system_code_uindex")
  @@unique([status_code, organisation_id], map: "shop__order_status_status_code_organisation_id_uindex")
  @@index([organisation_id], map: "shop__order_status_organisation_id_index")
}

enum PaymentStatus {
  FREE
  LIFETIME
}

enum AuthProvider {
  Google
  Credentials
}

enum operation_class_enum {
  A
  B
  C
}
